# -*- coding: utf-8 -*-
"""랜덤포레스트 (원본) 최종 - 주연.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1U88LK7p9pzXorzguMeP7oB9qzMFDrpPI
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.preprocessing import LabelEncoder, OneHotEncoder
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, f1_score, recall_score, precision_score, average_precision_score, roc_auc_score
from imblearn.over_sampling import SMOTE
from sklearn.ensemble import RandomForestClassifier

#obtuna
# 각 모델 정확도를 제외한 모든 수치가 낮아 실사용 불가, optuna를 이용한 튜닝 수행
# !pip install --quiet optuna

import optuna
import itertools
import sklearn.svm
import sklearn.model_selection
from sklearn.metrics import classification_report

#평가 AUC
from sklearn.metrics import roc_auc_score

# 데이터 로드 및 전처리
pd.set_option('display.max_columns', None)
df = pd.read_csv('/content/drive/MyDrive/심화프로젝트 ML/train.csv')

nan_data = df.drop(columns=['id', 'CustomerId'])
data = nan_data[~nan_data.duplicated()]

# 이탈자 군집 분석을 위한 데이터프레임 복사
df_filtered = df
df_filtered = df_filtered[df_filtered['Exited'] != 0]

le = LabelEncoder()
data['Gender'] = le.fit_transform(data["Gender"])

oe = OneHotEncoder()
geo_csr = oe.fit_transform(data[['Geography']])
geo_df = pd.DataFrame(geo_csr.toarray(), columns=oe.get_feature_names_out())

data = pd.concat([data.reset_index(drop=True), geo_df.reset_index(drop=True)], axis=1)
data.drop(columns=['Surname', 'Geography'], inplace=True)

X = data.drop(columns=['Exited']).reset_index(drop=True)
y = data['Exited'].reset_index(drop=True)

X_train, X_test, y_train, y_test = train_test_split(X, y, stratify=y, test_size=0.2, random_state=42)

# SMOTE 적용
sm = SMOTE(random_state=42)
X_train_res, y_train_res = sm.fit_resample(X_train, y_train)

# Age, NumOfProducts, IsActiveMember 변수 기준으로 K-Means clustring 진행
from sklearn.cluster import KMeans

X_cluster = df[['Age', 'NumOfProducts', 'IsActiveMember']]

# 각 K값에 대한 오차제곱합 계산 및 시각화
SSE = []
for k in range(1, 11):
    kmeans = KMeans(n_clusters=k, random_state=42)
    kmeans.fit(X_cluster)
    SSE.append(kmeans.inertia_)

plt.plot(range(1,11), SSE, marker='o')
plt.xlabel('value of K')
plt.ylabel('inertia(SSE)')
plt.show()

diff = np.diff(SSE)
optimal_k = np.argmin(diff[1:] - diff[:1]) +2
print(optimal_k)

# 경사가 가장 완만해지는 K값 = 2이나 그룹 간 특징을 산출하기 위해 k=3 사용, 1,2번 그룹이 이탈률이 상대적으로 높음
kmeans = KMeans(n_clusters=4, random_state=42)
df_filtered['Cluster'] = kmeans.fit_predict(X_cluster)
df_filtered[['Age', 'NumOfProducts','IsActiveMember' ,'Cluster']].head()

cluster_analysis = df_filtered.groupby('Cluster')['Exited'].mean()
print(cluster_analysis)

cluster_summery = df_filtered.groupby('Cluster').mean(numeric_only=True).drop(['id', 'CustomerId'], axis=1)
cluster_summery

cluster_summery_mode = df_filtered.groupby('Cluster').agg({
    'NumOfProducts' : lambda x : x.mode()[0],
    'HasCrCard' : lambda x : x.mode()[0],
    'IsActiveMember' : lambda x : x.mode()[0]
    })
cluster_summery_mode

# 산점도를 통한 군집 시각화
selected_features = ['Age', 'NumOfProducts', 'IsActiveMember']
sns.pairplot(df_filtered, vars = selected_features ,hue="Cluster", palette="viridis", diag_kind="kde")
plt.suptitle("K-Means Clustering Results", y=1.02)
plt.show()

# 3D 산점도 시각화
from mpl_toolkits.mplot3d import Axes3D

fig = plt.figure(figsize=(8, 6))
ax = fig.add_subplot(111, projection='3d')

# 클러스터별 색상 설정
scatter = ax.scatter(df_filtered["Age"], df_filtered["IsActiveMember"], df_filtered["NumOfProducts"],
                     c=df_filtered["Cluster"], cmap="viridis", s=50, alpha=0.7, edgecolors='k')

# 축 라벨 설정
ax.set_xlabel("Age")
ax.set_ylabel("IsActiveMember")
ax.set_zlabel("NumOfProducts")
ax.set_title("3D Scatter Plot of K-Means Clusters")

# 컬러바 추가
plt.colorbar(scatter, ax=ax, label="Cluster")

# 그래프 표시
plt.show()

# 클러스터별 Age 분포
plt.figure(figsize=(8, 5))
sns.boxplot(x="Cluster", y="Age", data=df_filtered)
plt.title("Age Distribution by Cluster")
plt.show()

# 클러스터별 NumOfProducts 분포
plt.figure(figsize=(8, 5))
sns.barplot(x="Cluster", y="NumOfProducts", data=df_filtered)
plt.title("NumOfProducts Distribution by Cluster")
plt.show()

# 클러스터별 IsActiveMember 분포
plt.figure(figsize=(8, 5))
sns.barplot(x="Cluster", y="IsActiveMember", data=df_filtered)
plt.title("IsActiveMember Distribution by Cluster")
plt.show()